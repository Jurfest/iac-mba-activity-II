---
# MongoDB Database Server Configuration Playbook
# This playbook configures an AWS EC2 instance to serve as a MongoDB database host.

- name: Configure MongoDB Database Server (AWS EC2 instance target host for db)
  hosts: managed_db_node
  become: true

  vars:
    ubuntu_version: "jammy"

  tags:
    - db-install

  tasks:
    # Print a success message for debugging purposes
    - name: Print success message
      debug:
        msg: "The MongoDB database server playbook ran successfully."

    # Install required packages if not already installed
    - name: Install gnupg and curl if not installed
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - gnupg
        - curl

    # Add MongoDB GPG (GNU Privacy Guard) key
    - name: Add MongoDB GPG key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-7.0.asc

    # Check if MongoDB public GPG key is already imported
    - name: Check if MongoDB public GPG key is already imported
      stat:
        path: /usr/share/keyrings/mongodb-server-7.0.gpg
      register: gpg_key_status

    # Import MongoDB public GPG key if not already imported
    - name: Import MongoDB public GPG key if not already imported
      shell: |
        curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
          sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
      args:
        executable: /bin/bash
      when: gpg_key_status.stat.exists == false

    # Ensure MongoDB repository configuration file exists
    - name: Ensure MongoDB repository configuration file exists
      become: true
      file:
        path: /etc/apt/sources.list.d/mongodb-org-7.0.list
        state: touch

    # Configure MongoDB repository with GPG keyring
    - name: Configure MongoDB repository with GPG keyring
      become: true
      blockinfile:
        path: /etc/apt/sources.list.d/mongodb-org-7.0.list
        block: |
          deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu {{ ubuntu_version }}/mongodb-org/7.0 multiverse
        state: present

    # Update package lists using apt-get update
    - name: Update package lists
      shell: apt-get update

      # Update package lists | TODO: - Try to remove this task
    - name: Update package lists
      apt:
        update_cache: yes
    # Install MongoDB package
    - name: Install MongoDB package
      package:
        name: mongodb-org
        state: present

    # Start MongoDB service
    - name: Start MongoDB service
      service:
        name: mongod
        state: started
        enabled: yes

# MongoDB Database Configuration
# After setting up MongoDB, it needs configuration to allow backend communication.
# This playbook sets up the admin user, application user (backend user), and network configurations.

- name: Playbook that Configure MongoDB Database
  hosts: managed_db_node
  become: yes

  vars_files:
    - vars/managed_db_node/secret.yml

  tags:
    - db-config-admin

  tasks:
    # Ensure required Python packages are installed
    # - name: Install required Python packages
    #   package:
    #     name: "{{ item }}"
    #     state: latest
    #   loop:
    #     - python3-pip
    #     - pymongo

    - name: pip3 installed
      package:
        name: python3-pip
        state: latest

    - name: pip pymongo installed
      pip:
        name: pymongo
        state: latest

    # - name: admin user
    #   command: "{{ item }}"
    #   loop:
    #   - mongosh admin --eval 'db.dropUser("{{ db_admin_user }}")'
    #   - |
    #     mongosh admin --eval 'db.createUser( { user: "{{ db_admin_user }}", pwd: "{{ db_admin_pass }}", roles: [ { role: "clusterAdmin", db: "admin" }, { role: "userAdminAnyDatabase", db: "admin" } ] } )'

    # - name: Drop root user if exists
    #   mongodb_user:
    #     login_user: "{{ db_root_user }}"
    #     login_password: "{{ db_root_pass }}"
    #     login_port: "27017"
    #     database: admin
    #     name: "{{ db_root_user }}"
    #     state: absent

    # Create MongoDB root user
    - name: Create MongoDB root user
      mongodb_user:
        # NOTE: - Remove default port?
        # login_port: "27017"
        database: "admin"
        name: "{{ db_root_user }}"
        password: "{{ db_root_pass }}"
        roles: "root"

    # Create MongoDB administrative user
    - name: Create MongoDB administrative user
      mongodb_user:
        login_user: "{{ db_root_user }}"
        login_password: "{{ db_root_pass }}"
        # login_port: "27017"
        database: "admin"
        name: "{{ db_admin_user }}"
        password: "{{ db_admin_pass }}"
        roles:
          - { db: "admin", role: "readWriteAnyDatabase" }
          - { db: "admin", role: "dbAdminAnyDatabase" }
          - { db: "admin", role: "clusterMonitor" }

    - name: Create Todo (application) database user
      mongodb_user:
        login_user: "{{ db_admin_user }}"
        login_password: "{{ db_admin_pass }}"
        database: admin
        user: "{{ db_todo_user }}"
        password: "{{ db_todo_pass }}"
        state: present
        roles:
          - db: "{{ db_name_todo }}"
            role: readWrite

    # Enable remote connections in MongoDB (accepts connections from anywhere)
    - name: Enable remote connections in MongoDB
      lineinfile:
        path: /etc/mongod.conf
        line: "  bindIp: 0.0.0.0"
        regexp: '^(.*)bindIp(.*)$'
        state: present
      notify: 
        - Restart MongoDB service

    # Enable authentication in MongoDB (/etc/mongod.conf)
    - name: Enable authentication in MongoDB
      blockinfile:
        path: /etc/mongod.conf
        block: |
          security:
            authorization: "enabled"
        state: present
      notify: Restart MongoDB service

  handlers:
    # Restart MongoDB service
    - name: Restart MongoDB service
      service:
        name: mongod
        state: restarted
