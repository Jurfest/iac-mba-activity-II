---
# Adhering to the declarative paradigm, this configures a 
# managed server, specifically an AWS EC2 instance. Tasks include 
# package installation, cache update, SQL query execution, etc.

# A playbook is a list of one or more plays
# A play defines a list of tasks
- name: Configure managed server (AWS EC2 instance target host)
  hosts: managed_node
  become: true

  roles:
    - specs_report
  #   - minha_role

  tasks:
    # The debug module print a message on the terminal for debugging purpose
    - name: Print success message
      debug: 
        msg: "The control node successfully ran the managed_node playbook."

    # A task is a call of a module
    - name: Update package cache
      package:
        name: '*'
        state: latest
      become: true

    # To get detailed information about this important ansible module, "package", 
    # you can use ad-hoc ansible command, within imperative paradigm:
    # $ ansible-doc package
    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - nginx
        # - package2
        # - package3
      become: true

    # One advantage of using ansible modules, like user, is that ansible modules
    # are idempotent
    # - name: Add user
    #   user:
    #     name: johndoe
    #     password: $6$rounds=656000$OHRGKwdSn3XzDNLb$zn7SL3VzLPC5tTbUJ5VlSYF5iFvH6sDNElX0x8X5sDeWsn5KIZ/WgjifwMZwMxUfyuxKuMNcF6usGiCCHPp2G0
    #     state: present
    #   become: true

    # - name: Add user to sudo group
    #   user:
    #     name: johndoe
    #     groups: wheel
    #     append: yes
    #   become: true

    # - name: Criar um grupo
    #   group:
    #     name: meugrupo
    #     state: present
    
    # - name: Criar um usu√°rio
    #   user: 
    #     name: meuusuario
    #     groups: meugrupo
    #     state: present

    # DB interaction
    # - name: Executar uma consulta SQL
    #   mysql_db:
    #     name: minha_database
    #     state: present

    # - name: Set up firewall
    #   firewalld:
    #     state: enabled
    #     permanent: true
    #     service: "{{ item }}"
    #     immediate: true
    #   loop:
    #     - ssh
    #     - http
    #   become: true
