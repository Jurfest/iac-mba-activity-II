---
#

# Ansible_facts of managed_db_node is defined
- name: Play just to load managed_db_node hostvars
  hosts: managed_db_node
  tasks: []

- name: Configure backend - Prebuild
  hosts: managed_app_node
  become: true

  tags:
    - be-pre-build

  tasks:
    # Print a success message for debugging purposes
    - name: Print success message
      debug:
        msg: "The backend playbook ran successfully."

    - name: Install Go
      import_role:
        name: abdennour.golang
      vars:
        golang_version: "1.14"
        golang_packages:
          - github.com/gorilla/mux
          - go.mongodb.org/mongo-driver/mongo # go get go.mongodb.org/mongo-driver/mongo
        golang_users:
          - "{{ ansible_ssh_user }}"

- name: Play backend - Build
  hosts: managed_app_node
  become: true

  vars:
    be_build_workspace: /opt/build_dir
    be_repo_url: https://github.com/kubernetes-tn/go-to-do-app.git
    be_repo_name: go-to-do-app

  tags:
    - be-build

  tasks:
    - name: workspace build exists
      file:
        path: "{{ be_build_workspace }}"
        state: directory

    - name: Check if the repository directory exists
      stat:
        path: "{{ be_build_workspace }}/{{ be_repo_name }}"
      register: repo_dir_status

    - name: Fetch the code if repository directory doesn't exist
      git:
        repo: "{{ be_repo_url }}"
        dest: "{{ be_build_workspace }}/{{ be_repo_name }}"
      when: not repo_dir_status.stat.exists

    - name: go build
      # shell: . /etc/profile;go build -o {{ be_tmp_bin }}
      shell: . /etc/profile;go build -o /tmp/todo
      args:
        chdir: "{{ be_build_workspace }}/{{ be_repo_name }}/server"

- name: Deploy backend application
  hosts: managed_app_node
  become: true

  tags:
    - be-deploy

  tasks:
    # 1. Generate systemd service file for Todo application
    #    This task generates the systemd service file required to manage the Todo application.
    #    It triggers a systemd daemon reload upon completion.
    - name: Generate systemd service file for Todo
      template:
        src: todo.service.j2
        dest: /lib/systemd/system/todo.service
      notify: Reload systemd daemon

    # 2. Generate environment file for Todo application
    #    This task generates an environment file containing environment variables required by the Todo application.
    #    It includes the tasks defined in 'tasks/backend_env_file.yaml'.
    - name: Generate environment file for Todo
      include_tasks: tasks/backend_env_file.yml

    # 3. Deploy backend application binary
    #    This task deploys the backend application binary from '/tmp/todo' to '/usr/local/bin/todo'.
    #    It sets appropriate permissions and triggers a restart of the Todo service.
    - name: Deploy backend application
      copy:
        src: "{{ be_tmp_bin }}"
        dest: "{{ be_prod_bin }}"
        mode: a+x
        remote_src: yes # specifies that the source is on the remote machine
      notify: Restart backend service

  handlers:
    # Handler to reload systemd daemon after generating the service file
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    # Handler to restart the Todo service after deploying the backend application
    - name: Restart backend service
      service:
        name: todo
        state: restarted

