---
# This playbook should be executed as the initial step. It configures SSH keys
# to enable the control node to access the managed node without explicitly
# specifying the public key.

- name: Generate SSH key on control node
  hosts: control_node
  tasks:
    # Each task has an output
    - name: Generate SSH key and save to a variable
      shell: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -q -N ""
      args:
        creates: ~/.ssh/id_rsa
      register: ssh_keygen_output
      # The register keyword is used to assign a value to a new variable (ssh_keygen_output).
      # This kind of variables are denomined as registered variables

    - name: Copy generated public key to the controller
      fetch:
        src: ~/.ssh/id_rsa.pub
        dest: /tmp/ssh_key.pub
        flat: yes

- name: Add public key to authorized_keys file on managed node
  hosts: managed_nodes
  tasks:
    - name: Add public key to authorized_keys file
      authorized_key:
        user: ubuntu
        key: "{{ lookup('file', '/tmp/ssh_key.pub') }}"
        state: present

# - name: Generate and add SSH key on control node
#   hosts: control_node
#   tasks:
#     - name: Generate SSH key
#       shell: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -q -N ""
#       args:
#         creates: ~/.ssh/id_rsa

#     - name: Extract public key
#       shell: cat ~/.ssh/id_rsa.pub
#       register: public_key_output

#     - name: Set public key as a variable
#       set_fact:
#         ssh_public_key: "{{ public_key_output.stdout }}"

# - name: Add public key to authorized_keys file on managed node
#   hosts: managed_node
#   tasks:
#     - name: Add public key to authorized_keys file
#       lineinfile:
#         path: ~/.ssh/authorized_keys
#         line: "{{ ssh_public_key }}"
#         create: yes
#         owner: ubuntu
#         group: ubuntu
#         mode: '0600'
